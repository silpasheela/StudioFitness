router.get(
  "/auth/google",
  passport.authenticate("google", { scope: ["profile", "email"] })
)

router.get("/auth/google/callback", googleAuthenticate)

router.get("/auth/google/failure", failedGoogleAuthentication)



export const googleAuthenticate = (req, res, next) => {
  console.log("called")
  passport.authenticate("google", { session: false }, async (err, user) => {
    try {
      if (err) {
        throw err
      }
      const token = createToken(user._id, user.email)
      // res.cookie("googleToken", token)
      console.log(token)
      res.redirect(`https://vibee.kromium.shop/login?googleToken=${token}`)
    } catch (error) {
      console.log(error)
      return res.redirect(
        "https://vibee.kromium.shop/login?authentication=failed"
      )
    }
  })(req, res)
}

export const failedGoogleAuthentication = async (req, res) => {
  res.redirect("https://vibee.kromium.shop/login?authentication=failed")
}




import passport from "passport"
import { Strategy as GoogleStrategy } from "passport-google-oauth20"
import userModel from "../model/User.js"

passport.use(
  new GoogleStrategy(
    {
      clientID: process.env.GOOGLE_CLIENT_ID,
      clientSecret: process.env.GOOGLE_CLIENT_SECRET,
      callbackURL: "https://www1.kromium.shop/api/auth/google/callback",
    },
    async function (accessToken, refreshToken, profile, done) {
      try {
        const existing = await userModel.findOne({ googleId: profile.id })
        if (existing) {
          return done(null, existing, { message: "Logged in succesfully" })
        }
        const emailExisting = await userModel.findOne({
          email: profile.emails[0].value,
        })
        if (emailExisting) return done({ message: "User already exists" })
        const user = new userModel({
          firstName: profile.name.givenName,
          lastName: profile.name.familyName,
          username: (profile.name.givenName + profile.id).toLowerCase(),
          email: profile.emails[0].value,
          profilePicture: profile.photos[0]?.value,
          googleId: profile.id,
          isVerified: true,
        })
        await user.save()
        return done(null, user)
      } catch (error) {
        console.log(error)
        done(error)
      }
    }
  )
)

import passport from "passport"
import { Strategy as JWTstrategy } from "passport-jwt"
import { ExtractJwt } from "passport-jwt"

passport.use(
  new JWTstrategy(
    {
      secretOrKey: process.env.TOKEN_SECRET_KEY,
      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),
    },
    async (token, done) => {
      try {
        return done(null, token.user)
      } catch (error) {
        done(error)
      }
    }
  )
)









{
  _id: new ObjectId("653e85fc1c6919350f97546a"),
  fullName: 'Ben Long',
  mobileNumber: '7845888555',
  email: 'ben@gmail.com',
  password: '$2b$10$x/2C/ni/H5tf2J4UGx9.3e/83gYT.WotU/AOc0SUcBEG6h7EX5flK',
  role: 'user',
  emailVerificationToken: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI3ODQ1ODg4NTU1IiwiZW1haWwiOiJiZW5AZ21haWwuY29tIiwiaWF0IjoxNjk4NTk2MzQ4LCJleHAiOjE2OTg2MDM1NDh9.uS7nkldhKR9j0JZFrO0x9pVYXTupWSbW5QJYR-vXZSs',
  isEmailVerified: false,
  isActive: true,
  __v: 0,
  stripeCustomerId: 'cus_OuQZjbGvz5eAMr'
}
customer {
  id: 'cus_OuQZjbGvz5eAMr',
  object: 'customer',
  address: null,
  balance: 0,
  created: 1698596390,
  currency: null,
  default_source: 'card_1O6biMSFewJqLbl0Re4TTTqk',
  delinquent: false,
  description: null,
  discount: null,
  email: 'ben@gmail.com',
  invoice_prefix: 'A342D421',
  invoice_settings: {
    custom_fields: null,
    default_payment_method: null,
    footer: null,
    rendering_options: null
  },
  livemode: false,
  metadata: {},
  name: 'Ben Long',
  next_invoice_sequence: 1,
  phone: null,
  preferred_locales: [],
  shipping: null,
  tax_exempt: 'none',
  test_clock: null
}
paymnt {
  id: 'pi_3O6biOSFewJqLbl00Sav8O2W',
  object: 'payment_intent',
  amount: 199900,
  amount_capturable: 0,
  amount_details: { tip: {} },
  amount_received: 199900,
  application: null,
  application_fee_amount: null,
  automatic_payment_methods: null,
  canceled_at: null,
  cancellation_reason: null,
  capture_method: 'automatic',
  client_secret: 'pi_3O6biOSFewJqLbl00Sav8O2W_secret_yGqA0G1dJT2OSzjM6UdD1nBxk',
  confirmation_method: 'automatic',
  created: 1698596392,
  currency: 'inr',
  customer: 'cus_OuQZjbGvz5eAMr',
  description: null,
  invoice: null,
  last_payment_error: null,
  latest_charge: 'ch_3O6biOSFewJqLbl00mryqLnS',
  livemode: false,
  metadata: {},
  next_action: null,
  on_behalf_of: null,
  payment_method: null,
  payment_method_configuration_details: null,
  payment_method_options: {
    card: {
      installments: null,
      mandate_options: null,
      network: null,
      request_three_d_secure: 'automatic'
    }
  },
  payment_method_types: [ 'card' ],
  processing: null,
  receipt_email: null,
  review: null,
  setup_future_usage: null,
  shipping: null,
  source: 'card_1O6biMSFewJqLbl0Re4TTTqk',
  statement_descriptor: null,
  statement_descriptor_suffix: null,
  status: 'succeeded',
  transfer_data: null,
  transfer_group: null
}
subs {
  id: 'sub_1O6biQSFewJqLbl0N6trWNYp',
  object: 'subscription',
  application: null,
  application_fee_percent: null,
  automatic_tax: { enabled: false },
  billing_cycle_anchor: 1698596394,
  billing_thresholds: null,
  cancel_at: null,
  cancel_at_period_end: false,
  canceled_at: null,
  cancellation_details: { comment: null, feedback: null, reason: null },
  collection_method: 'charge_automatically',
  created: 1698596394,
  currency: 'inr',
  current_period_end: 1701274794,
  current_period_start: 1698596394,
  customer: 'cus_OuQZjbGvz5eAMr',
  days_until_due: null,
  default_payment_method: null,
  default_source: null,
  default_tax_rates: [],
  description: null,
  discount: null,
  ended_at: null,
  items: {
    object: 'list',
    data: [ [Object] ],
    has_more: false,
    total_count: 1,
    url: '/v1/subscription_items?subscription=sub_1O6biQSFewJqLbl0N6trWNYp'
  },
  latest_invoice: 'in_1O6biQSFewJqLbl0tNceRnxH',
  livemode: false,
  metadata: {},
  next_pending_invoice_item_invoice: null,
  on_behalf_of: null,
  pause_collection: null,
  payment_settings: {
    payment_method_options: {
      acss_debit: null,
      bancontact: null,
      card: [Object],
      customer_balance: null,
      konbini: null,
      us_bank_account: null
    },
    payment_method_types: null,
    save_default_payment_method: 'off'
  },
  pending_invoice_item_interval: null,
  pending_setup_intent: null,
  pending_update: null,
  plan: {
    id: 'price_1O61X2SFewJqLbl0GYh4jPmU',
    object: 'plan',
    active: true,
    aggregate_usage: null,
    amount: 199900,
    amount_decimal: '199900',
    billing_scheme: 'per_unit',
    created: 1698457304,
    currency: 'inr',
    interval: 'month',
    interval_count: 1,
    livemode: false,
    metadata: {},
    nickname: null,
    product: 'prod_OtpB7WQpVrEZVq',
    tiers_mode: null,
    transform_usage: null,
    trial_period_days: null,
    usage_type: 'licensed'
  },
  quantity: 1,
  schedule: null,
  start_date: 1698596394,
  status: 'incomplete',
  test_clock: null,
  transfer_data: null,
  trial_end: null,
  trial_settings: { end_behavior: { missing_payment_method: 'create_invoice' } },
  trial_start: null
}